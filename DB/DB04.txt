8. SUBQUERY : SQL문장 안에 또 다른 SQL 문장이 포함되어잇는것
-- 여러번의 DB 접속이 필요한 상황을 한번으로 줄여서 속도를 증가시킬 수 잇다.

**서브쿼리를 사용할 수 있는 곳
1) WHERE, HAVING
2) SELECT, DELETE절의 FROM
3) UPDATE절의 SET
4) INSERT절의 INTO

예) 이름이  Michael이고 직종이 MK_MAN인 사원의 급여보다
더 많이받는(초과) 사원들의 정보를 사번, 이름, 직종, 급여 순으로 출력

SELECT salary
FROM employees
WHERE first_name='Michael' and job_id = 'MK_MAN';

SELECT employee_id,. first_name, job_id, salary
FROM employees
WHERE salary> 13000;

--위이 두  SELECT를 SUBQUERY를 통해 하나로 합치자!!
SELECT employee_id, first_name, job_id, salary
FROM employees
WHERE salary > ( SELECT salary
FROM employees
WHERE first_name='Michael' and job_id = 'MK_MAN' );

문) 사번이 150번인 사원과 급여가 같은 사원의 정보를 사번, 이름, 급여 순으로 출력

SELECT employee_id, first_name, salary
FROM employees
WHERE salary = (SELECT salary FROM employees WHERE employee_id = 150);

문)월급이 평균 월급 이상인 사원들의 이름과 급여를 출력

SELECT first_name, salary
FROM employees
WHERE salary >= (SELECT AVG(salary) FROM employees)
ORDER BY salary DESC;

문) 사번이 111번인 사원의 직종과 같고, 사번이 159번인 사원보다 
급여를 많이 받는 사원들의 정보를 사번,이름, 직종,급여순으로 출력
SELECT employee_id, first_name, job_id, salary
FROM employees
WHERE job_id=(SELECT job_id FROM employees WHERE em  ployee_id = 111) AND salary > (SELECT salary FROM employees WHERE employee_id =159); 

문) 직종, 평균급여를 출력하되
평균급여가  Bruce 사원보다 큰 경우를 조회

SELECT job_id, AVG(salary)
FROM employees
GROUP BY job_id
HAVING AVG(salary) > (SELECT salary FROM employees where first_name='Bruce');

문) 성 중에 Bat를 포함하고 있는 사원과 같은 부서에서
근무하는 사원들의 부서번호, 이름을 출력
 
SELECT department_id,first_name
FROM employees
WHERE department_id = (SELECT department_id FROM employees WHERE last_name Like'%Bat%');

---------------------------------------------------------------------------------------------------------------

9.JOIN(InnerJoin) : 테이블과 테이블을 연결하여 특정 데이터를 얻고자 할때 사용
  1) 기본키 (primary key) : 하나의 테이블에서 절대로 중복된 값이 추가되면 안되는 칼럼
  2) 후보키 (candidate key) : 기본키가 될 자격이 있는 모든 컬럼
  3) 외래키(foreign key) : 한 테이블의 속성이 다른테이블의 기본키가 되는 것.

예) 사원테이블과 부서테이블(Departments)을 연결하여
사원테이블의 department_id에 속하는  실제 부서의 이름을 부서 테이블에서 가져오자

SELECT e.first_name,  e.department_id, d.department_name
FROM employees e, departments d
WHERE e.department_id=d.department_id;

예 ) 부서(departments), 지역(Locations)로 부터 부서 이름과 city를 출력하시오
SELECT d.department_name, l.city
FROM departments d, locations l
WHERE d.location_id = l.location_id;

문) 지역(locations), 나라(countries)를 조회하여
 city, country_name,을 조회하시오

SELECT l.city,c.country_name
FROM locations l, countries c
WHERE l.country_id = c.country_id;

문) first_name, last_name, job_id, job_title을 출력

SELECT e.first_name,e.last_name,j.job_id,j.job_title
FROM employees e, jobs j
WHERE e.job_id=j.job_id;

문) 사원, 부서, 지역테이블로부터
first_name,email,department_id,department_name,location_id,city
정보를 출력하되, city가 'Seattle'인 경우만 출력하시오

SELECT e.first_name, e.email, e.department_id, d.department_name, d.location_id, l.city
FROM employees e, departments d, locations l
WHERE e.department_id=d.department_id 
AND d.location_id=l.location_id 
AND l.city='Seattle';


-------------------------------------------------------------------------------------------

10. View : 조회를 목적으로 만드는 가상의 테이블

create or replace view MY_EMPL AS 
SELECT employee_id id, first_name name , salary
FROM employees;

SELECT * FROM MY_EMPL;

---------------------------

create or replace view MY_EMPL AS
SELECT employee_id id, first_name name,salary,(salary*commission_pct) comm
FROM employees;

SELECT * FROM MY_EMPL;

---------------------------------------------------------


create or replace view DATA_plus AS
SELECT s.employee_id, s.first_name
FROM ( select * from employees ) s;

SELECT * FROM DATA_plus;


